package main

import (
	"fmt"
)

func main() {

	// Встроенные функции для работы со срезами
	// Для работы со срезами в Go предусмотрены встроенные функции append и copy.

	// Функция append - добавление элементов в срез
	// Функция append позволяет добавить в срез новый элемент, выглядит она следующим образом:

	// func append(slice []Type, elems ...Type) []Type
	// В качестве первого аргумента функция получает срез, в который необходимо добавить новые элементы,
	// второй и последующий элементы - это элементы совместимого со срезом типа, которые необходимо добавить в срез.
	// Функция возвращает новый срез, содержащий ранее содержавшиеся в срезе элементы,
	// а также новые элементы, переданные в качестве аргумента функции append.
	// Подробно функции будут рассмотрены в разделе 2.1. Функции.

	a := []int{1, 2, 3}
	a = append(a, 4, 5)

	fmt.Println(a) // [1 2 3 4 5]

	// Использование append для удаления элемента из среза
	// В Go отсутствует встроенная функция для удаления элемента из среза, но мы можем воспользоваться функцией append для того,
	// чтобы создать новый срез, включающий в себя срез элементов до игнорируемого элемента, а также все элементы после игнорируемого:

	b := []int{1, 2, 3, 4, 5, 6, 7}
	b = append(b[0:2], b[3:]...)
	fmt.Println(b) // [1 2 4 5 6 7]

	// В этом примере встречается символ ... после указания на передачу среза в качестве аргумента.
	// Этот вопрос также будет повторно рассмотрен в разделе 2.1.
	// Функции. В настоящий момент можете запомнить, что такое использование многоточия означает раскрытие среза
	// (его элементы передаются функции append как отдельные аргументы).
}
